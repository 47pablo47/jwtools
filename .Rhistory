#Basic functions
p <- function(...) {
a <- c(...)
b <- paste(a, collapse="")
if (b=="") {
message("WARNING: no input")
}
return(b)
}
p("asads","sd",1)
p()
library(devtools)
install.packages("devtools")
install.packages("roxygen2")
#' Quickly paste vector into single string
#'
#' This function does pretty much the same as paste0, though it is much quicker to call
#' @param ... Any type of variables that will be pasted into string
#' @return A single string made of the input vector
#' @examples
#' output1 <- p("data/",var,".png");
#' output2 <- p("cell_",1","slice_",2);
#' @export
p <- function(...) {
a <- c(...)
b <- paste(a, collapse="")
if (b=="") {
message("WARNING: no input")
}
return(b)
}
roxygenise()
roxygenise()
library(devtools)
library(roxygen2)
roxygenise()
roxygenise()
devtools::load_all(".")
library(jwtools)
p(1."As")
p(1,"As")
p(1,"As","sdds",TRUE)
#' Quickly paste vector into single string
#'
#' This function does pretty much the same as paste0, though it is much quicker to call
#' @param ... Any type of variables that will be pasted into string
#' @return A single string made of the input vector
#' @examples
#' var <- "file"
#' output1 <- p("data/",var,".png");
#' output2 <- p("cell_",1","slice_",2);
#' @export
p <- function(...) {
a <- c(...)
b <- paste(a, collapse="")
if (b=="") {
message("WARNING: no input")
}
return(b)
}
roxygenise()
#' Quickly paste vector into single string
#'
#' This function does pretty much the same as paste0, though it is much quicker to call
#' @param ... Any type of variables that will be pasted into string
#' @return A single string made of the input vector
#' @examples
#' var <- "file"
#' output1 <- p("data/",var,".png");
#' output2 <- p("cell_",1","slice_",2);
#' @export
p <- function(...) {
a <- c(...)
b <- paste(a, collapse="")
if (b=="") {
message("WARNING: no input")
}
return(b)
}
roxygenise()
roxygenise()
devtools::load_all(".")
getwd()
library()
library(jwtools)
mtcars
vd(mtcars)
build(jwtools)
build("jwtools")
create("jwtools")
build()
install.packages("jwtools")
install.packages("jwtools")
library(devtools)
library(roxygen2)
build()
check()
?install.packages()
?library()
library(lib.loc = D:\Dokumenty\Makra i programy\r_packages)
library(lib.loc = D:/Dokumenty/Makra i programy/r_packages)
library(lib.loc = "D:/Dokumenty/Makra i programy/r_packages")
library(lib.loc = "D:/Dokumenty/Makra i programy/r_packages/jwtools_0.0.1.0.tar.gz")
getwd
getwd()
install("jwtools")
install()
library(jwtools)
p(1,2)
roxygen2::roxygenise()
#' Quickly paste vector into single string
#'
#' This function does pretty much the same as paste0, though it is much quicker to call
#' @param ... Any type of variables that will be pasted into string
#' @return A single string made of the input vector
#' @examples
#' var <- "file"
#' output1 <- p("data/",var,".png")
#' output2 <- p("cell_",1,"slice_",2)
#' @export
p <- function(...) {
a <- c(...)
b <- paste(a, collapse="")
if (b=="") {
message("WARNING: no input")
}
return(b)
}
#' Quickly peek the first rows of data frame
#'
#' This function allows for peeking first 10 rows of data frame and is easy to call
#' @param x A data frame
#' @return Ten first rows of input data frame
#' @examples
#' vd(df)
#' @export
vd <- function(x) {
View(head(x,10))
}
roxygen2::roxygenise()
devtools::build()
devtools::install()
?p()
getwd()
library(devtools)
library(roxygen2)
roxygenise()
build()
install
install()
?p
??p()
VieW(mtcars)
View(mtcars)
#' Most basic ggplot
#'
#' The most basic ggplot useful for visualisation of non-complicated data frames
#' @param df Data frame used for plotting
#' @param val Name of the column that will be passed to the aes_string as y
#' @param var Name of the column that will be passed to the aes_string as x
#' @return Nice and simple plot
#' @examples
#' bplot(mtcars,"cyl","hp")
bplot <- function(df,val,var) {
ggplot(df, aes_string(x=var, y=val)) +
stat_summary(geom="bar", fun="mean", color="black", fill="white", width=0.5) +
geom_jitter(width=0.2) +
scale_y_continuous(expand = expansion(mult = c(0, 0.3))) +
theme_bw()
}
bplot(mtcars, "cyl","hp")
library(tidyverse)
bplot(mtcars, "cyl","hp")
bplot(mtcars, "hp","cyl")
bplot <- function(df,val,var="treat") {
ggplot(df, aes_string(x=var, y=val)) +
stat_summary(geom="bar", fun="mean", color="black", fill="white", width=0.5) +
geom_jitter(width=0.2) +
scale_y_continuous(expand = expansion(mult = c(0, 0.3))) +
theme_bw()
}
bplot(mtcars, "hp","cyl")
bplot(mtcars, "hp")
names(mtcars)
names(mtcars)[2]
names(mtcars)[2] <- "treat"
bplot(mtcars, "hp")
bplot(mtcars, "hp", "vs")
roxygenise()
build()
install()
roxygen2::roxygenise()
devtools::load_all()
devtools::load_all(".")
roxygen2::roxygenise()
#' Most basic ggplot
#'
#' The most basic ggplot useful for visualisation of non-complicated data frames
#' @param df Data frame used for plotting
#' @param val Name of the column that will be passed to the aes_string as y
#' @param var Name of the column that will be passed to the aes_string as x
#' @return Nice and simple plot
#' @examples
#' bplot(mtcars,"cyl","hp")
bplot <- function(df,val,var="treat") {
ggplot(df, aes_string(x=var, y=val)) +
stat_summary(geom="bar", fun="mean", color="black", fill="white", width=0.5) +
geom_jitter(width=0.2) +
scale_y_continuous(expand = expansion(mult = c(0, 0.3))) +
theme_bw()
}
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(devtools)
build()
install
install()
library(devtools)
devtools::document()
build()
install()
shw <- function(df, y, x=treat) {
res <- df %>%
group_by(x) %>%
summarise(norm = shapiro_test(!!sym(y))$p.value)
return(res)
}
shw(mtcars,vyl,hp)
library(tidyverse)
shw(mtcars,vyl,hp)
shw(mtcars,vyl,hp)
shw(mtcars,cyl,hp)
shw(mtcars,"cyl","hp")
shw <- function(df, y, x=treat) {
res <- df %>%
group_by(!!sym(x)) %>%
summarise(norm = shapiro_test(!!sym(y))$p.value)
return(res)
}
shw(mtcars,"cyl","hp")
library(ggpubr)
shw <- function(df, y, x=treat) {
res <- df %>%
group_by(!!sym(x)) %>%
summarise(norm = shapiro_test(!!sym(y))$p.value)
return(res)
}
shw(mtcars,"cyl","hp")
library(rstatix)
shw(mtcars,"cyl","hp")
names(mtcars)
shw(mtcars,"disp","hp")
nrow(mtcars)
View(mtcars)
shw(mtcars,"disp",x=rownames(mtcars))
View(mtcars)
shw(mtcars,"disp",x="mpg")
shw <- function(df, y, x="treat") {
res <- df %>%
group_by(!!sym(x)) %>%
summarise(norm = shapiro_test(!!sym(y))$p.value)
return(res)
}
shw(mtcars,"disp",x="mpg")
diamonds
shw(mtcars,"disp","mpg")
shw(diamonds,"color", "depth")
shw <- function(df, y, x="treat") {
res <- df %>%
group_by(!!sym(x)) %>%
summarise(norm = shapiro_test(!!sym(y))$p.value)
return(res)
}
shw(diamonds,"color", "depth")
rlang::last_trace()
shw <- function(df, y, x="treat") {
res <- df %>%
group_by(color) %>%
summarise(norm = shapiro_test(!!sym(y))$p.value)
return(res)
}
shw(diamonds,"color", "depth")
shw <- function(df, y, x="treat") {
res <- df %>%
group_by(depth) %>%
summarise(norm = shapiro_test(!!sym(y))$p.value)
return(res)
}
shw(diamonds,"color", "depth")
res <- df %>%
group_by(color) %>%
summarise(norm = shapiro_test(depth)$p.value)
shw
res
res <- df %>%
group_by(color) %>%
summarise(norm = shapiro_test(depth)$p.value)
res <- diamonds %>%
group_by(color) %>%
summarise(norm = shapiro_test(depth)$p.value)
names(diamonds)
View(diamonds)
res <- diamonds %>%
group_by(cut) %>%
summarise(norm = shapiro_test(depth)$p.value)
res <- diamonds %>%
group_by(cut,color) %>%
summarise(norm = shapiro_test(depth)$p.value)
res
res <- diamonds %>%
group_by(cut) %>%
summarise(norm = shapiro_test(depth)$p.value)
res <- diamonds %>%
group.by(cut) %>%
summarise(norm = shapiro_test(depth)$p.value)
res
res <- diamonds %>%
group_by(cut) %>%
summarise(norm = shapiro_test(depth)$p.value)
res
res <- diamonds %>%
group_by(cut) %>%
summarise(norm = shapiro_test(depth)$p.value)
rlang::last_trace()
unique(diamonds$cut)
unique(diamonds$cut)
unique(diamonds$color)
iris
names(iris)
res <- iris %>%
group_by(Species) %>%
summarise(norm = shapiro_test(Sepal.Width)$p.value)
res
res <- iris %>%
group_by(Species) %>%
summarise(norm = shapiro_test(Sepal.Width)$p.value)
res
shw <- function(df, y, x="treat") {
res <- df %>%
group_by(!!sym(x)) %>%
summarise(norm = shapiro_test(!!sym(y))$p.value) %>%
ungroup() %>%
mutate(sig = case_when = norm < 0.05 ~ "*",
shw <- function(df, y, x="treat") {
res <- df %>%
group_by(!!sym(x)) %>%
summarise(norm = shapiro_test(!!sym(y))$p.value) %>%
ungroup() %>%
mutate(sig = case_when = norm < 0.05 ~ "*",
shw <- function(df, y, x="treat") {
res <- df %>%
group_by(!!sym(x)) %>%
summarise(norm = shapiro_test(!!sym(y))$p.value) %>%
ungroup() %>%
mutate(sig = case_when(norm < 0.05 ~ "*",
TRUE ~ "ns"))
return(res)
}
shw(diamonds,"color", "depth")
shw(iris, "Sepal.Width", "Species")
shw <- function(df, y, x="treat") {
res <- df %>%
group_by(!!sym(x)) %>%
summarise(pval = shapiro_test(!!sym(y))$p.value) %>%
ungroup() %>%
mutate(norm = case_when(norm < 0.05 ~ "no",
TRUE ~ "yes"))
return(res)
}
shw(diamonds,"color", "depth")
shw(diamonds,"color", "depth")
shw(iris, "Sepal.Width", "Species")
shw <- function(df, y, x="treat") {
res <- df %>%
group_by(!!sym(x)) %>%
summarise(pval = shapiro_test(!!sym(y))$p.value) %>%
ungroup() %>%
mutate(norm = case_when(norm < 0.05 ~ "no",
TRUE ~ "yes"))
return(res)
}
shw(iris, "Sepal.Width", "Species")
shw <- function(df, y, x="treat") {
res <- df %>%
group_by(!!sym(x)) %>%
summarise(pval = shapiro_test(!!sym(y))$p.value) %>%
ungroup() %>%
mutate(norm = case_when(pval < 0.05 ~ "no",
TRUE ~ "yes"))
return(res)
}
shw(diamonds,"color", "depth")
shw(iris, "Sepal.Width", "Species")
library(devtools)
devtools::document()
devtools::document()
build()
install()
git init
library(usethis)
usethis::use_realease()
usethis::use_github_release()
devtools::release()
devtools::check()
dectools::release()
devtools::realease()
devtools::release()
usethis::use_github_release()
devtools::release()
devtools::document()
devtools::document()
devtools::load_all
devtools::load_all(".")
getwd()
devtools::load_all(".")
devtools::document()
devtools::load_all()
library(jwtools)
?jwtools::unsp()
